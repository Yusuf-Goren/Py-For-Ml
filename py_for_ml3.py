# -*- coding: utf-8 -*-
"""Py for ML3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XlMcFw78CHzGgeVyr_8UaLFw8G18CjQI

# Enterpolasyon
"""

import pandas as pd
import numpy as np

s = pd.Series([0,1,np.nan,3])
print(s)

s.interpolate()

from sklearn.impute import KNNImputer

X = [[1,2,np.nan],[3,4,3],[np.nan,6,5],[8,8,7]]

pd.DataFrame(X)

imputer = KNNImputer(n_neighbors = 2, weights="distance")
X= imputer.fit_transform(X)

pd.DataFrame(X)

data = {'Name':['Tom', 'Jack', 'Steve', 'Ricky','John','Elise'],'Surname':['Smith','Jones','Williams','Taylor','Davies','Brown'],
        'Age':[28,np.nan,29,24,23,22],'City':['Boston','Kansas','New York','Colorado','Washington',np.nan]}
df=pd.DataFrame(data)
print(df)

df.Name

df.City=df.City.replace(np.nan,"Other")
df.Age=df.Age.replace(np.nan,df.Age.mean())
#round(df.Age)
#df.Age=df.Age.fillna(df.Age.mean()).astype(int)
#pd.options.display.float_format =   '{:,.0f}'.format
df.Age

"""# Scaling"""

from sklearn.preprocessing  import StandardScaler

df_ss = df.copy()
df.Age

df_ss["Age_Scaled"] = StandardScaler().fit_transform(df_ss[['Age']])

print(df_ss.Age.mean())
print(df_ss.Age.std())

print(df_ss.Age_Scaled.mean())
print(df_ss.Age_Scaled.std())

df_ss.Age_Scaled

"""# MinMaxScaler"""

from sklearn.preprocessing import MinMaxScaler

df_mm= df.copy()

df_mm['Age_Scaled'] = MinMaxScaler().fit_transform(df_mm[['Age']])
df_mm

"""## **Label Encoding**"""

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

df_le = df.copy()

le.fit(df_le["City"])
list(le.classes_)

df_le.City = le.transform(df_le["City"])
df_le

le.inverse_transform([2,1,0,1])

"""# **ONE HOT ENCODING**"""

pd.get_dummies(df["City"])

"""# KUANTÄ°ZASYON BINDING"""

X = np.array([[-3,5.,15],
              [0.,6.,14],
              [6.,3.,11]])
X

from sklearn import preprocessing

preprocessing.KBinsDiscretizer(n_bins=[3,2,2], encode="ordinal").fit_transform(X)

binerizer = preprocessing.Binarizer(threshold=5.1)

binerizer.transform(X)