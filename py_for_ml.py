# -*- coding: utf-8 -*-
"""PY for ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1caSCOSaFo6bcEaEuIVflFXWdDkVVjg2_
"""

import pandas as pd
import numpy as np
import csv

df = pd.read_csv("covid.csv",encoding='latin1')

"""You can acces data frame data types"""

df.dtypes

"""You can see data shape"""

df.shape

"""You can see data size"""

df.ndim

"""You can see name of column's"""

df.columns

"""You can see relaiton of data"""

df.corr

"""You can see count of nun null data"""

df.count()

df.total_cases

"""You can add new columns"""

df['new column'] = 'New'
df.head()

"""You can see data with In this way data will be more legiable"""

df.iloc[0:4,0:4]

"""If you use inplace=True you dont have to use df = df..."""

df.loc[0:10,['female_smokers','diabetes_prevalence']]

df.drop([0,3,2,5]).head()

"""In the drop function default axis value is 0"""

df.drop("new_deaths", axis=1).head()

df.isnull().sum()

help(df.dropna)

df.total_tests
df.dropna(subset=["total_tests","new_tests"], how="all").count()

df_2=df.dropna(axis=1, how='any', thresh=1000)

df_2.male_smokers.fillna(value=df_2.male_smokers.mean())

df.isna().sum()

from sklearn.impute import SimpleImputer

imp_freq = SimpleImputer(missing_values=np.nan,strategy='mean')

df_2.aged_65_older = imp_freq.fit_transform(df_2[['aged_65_older']])

df_2['aged_65_older'].mean()

df_2

"""You can acces maximum value of colunm"""

df['median_age'].max()

"""You can access index of maximum values"""

df['median_age'].idxmax()

df['median_age'].describe()

df.shape

df.median_age.apply(lambda x: x if x >= 1 else 0)

"""You can unique values of rows"""

df.continent.unique()
df.continent = df.continent.apply(lambda x: str(x).replace('nan', 'Oceania'))
df.continent.unique()

"""You can sort values with usin sort_values function if you use ascending parameter you can sort both ways"""

df.total_cases.sort_values(ascending=False)

df.new_cases > df.new_cases.mean()

df.new_cases.describe()

a = df[df.new_cases > df.new_cases.mean()]
a.head(100)

grup = df.groupby('continent')
grup.count()

# for name, content in grup:
#   print("=>", name)
#   print(content.median_age)
grup.median_age.agg(np.mean)
grup.agg([np.size, np.sum, np.mean])

grup.get_group('Asia')

grup.filter(lambda x:x['median_age'].mean() > 30)

search_word = input('Aranacak kelimeyi giriniz : ')
print(df.bulacaklarmz.loc[df['Aloe vera'] == search_word])